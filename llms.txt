# Guidance for LLMs: Algorand Remote MCP

This document provides essential guidance for LLMs interacting with the Algorand Remote MCP.

## Critical First Steps

ALWAYS perform these actions at the start of each session:

1. **Check Wallet Configuration**:
   - Use `get_wallet_account` tool FIRST in EVERY session
   - Verify wallet exists and is correctly configured
   - If no wallet exists, inform the user that wallet configuration is missing

2. **Verify Network Configuration**:
   - This system is configured for **Algorand Mainnet**
   - All examples and asset IDs reference mainnet assets (e.g., USDC ASA ID: 31566704)

## Session Workflow

| Step | Action | Tool | Purpose |
|------|--------|------|---------|
| 1 | Check wallet | `get_wallet_account` | Verify wallet configuration |
| 2 | Get blockchain data | API query tools | Retrieve necessary information |
| 3 | Create transactions | Transaction tools | Prepare blockchain operations |
| 4 | Sign transactions | `sign_transaction` | Authorize operations |
| 5 | Submit transactions | `submit_transaction` | Execute on blockchain |
| 6 | Verify results | API query tools | Confirm operation success |

## Common Algorand Mainnet Assets

| Asset Name | Asset ID | Decimals | Description |
|------------|----------|----------|-------------|
| USDC | 31566704 | 6 | USD Coin - Most common stablecoin |
| USDT | 312769 | 6 | Tether USD - Popular stablecoin |
| ALGO | N/A | 6 | Native Algorand token (no ASA ID needed) |
| goETH | 386192725 | 8 | Wrapped Ethereum |
| goBTC | 386195940 | 8 | Wrapped Bitcoin |

> **Note**: Always verify asset IDs before transactions, as scam tokens may use similar names.

## Minimal Working Examples

### Send Payment

```
// 1. First, retrieve wallet information
use_tool: "get_wallet_account"
parameters: {}

// 2. If wallet exists, create a payment transaction
use_tool: "create_payment_transaction"
parameters: {
  "from": "[sender_address]",
  "to": "receiver_address",
  "amount": 1000000
}

// 3. Sign the transaction
use_tool: sign_transaction
parameters: {
  "encodedTxn": "[encoded_transaction_from_step_2]"
}

// 4. Submit the transaction
use_tool: submit_transaction
parameters: {
  "signedTxn": "[signed_transaction_from_step_3]"
}

// 5. Verify the result
use_tool: api_algod_get_transaction_info
parameters: {
  "txid": "[transaction_id_from_step_4]"
}
```

### Opt-in to Asset

```
// 1. First, retrieve wallet information
use_tool: "get_wallet_account"
parameters: {}

// 2. If wallet exists, create an asset opt-in transaction
use_tool: "asset_optin"
parameters: {
  "address": "[wallet_address]",
  "assetID": 31566704  // USDC on Algorand Mainnet
}

// 3. Sign the transaction
use_tool: sign_transaction
parameters: {
  "encodedTxn": "[encoded_transaction_from_step_2]"
}

// 4. Submit the transaction
use_tool: submit_transaction
parameters: {
  "signedTxn": "[signed_transaction_from_step_3]"
}

// 5. Verify the result
use_tool: api_algod_get_account_asset_info
parameters: {
  "address": "[wallet_address]",
  "assetId": 31566704  // USDC on Algorand Mainnet
}
```

### Send Asset

```
// 1. First, retrieve wallet information
use_tool: "get_wallet_account"
parameters: {}

// 2. If wallet exists, create an asset transfer transaction
use_tool: "transfer_asset"
parameters: {
  "from": "[sender_address]",
  "to": "receiver_address",
  "assetID": 31566704,  // USDC on Algorand Mainnet
  "amount": 1000000     // 1 USDC (6 decimals)
}

// 3. Sign the transaction
use_tool: sign_transaction
parameters: {
  "encodedTxn": "[encoded_transaction_from_step_2]"
}

// 4. Submit the transaction
use_tool: submit_transaction
parameters: {
  "signedTxn": "[signed_transaction_from_step_3]"
}

// 5. Verify the result
use_tool: api_algod_get_transaction_info
parameters: {
  "txid": "[transaction_id_from_step_4]"
}
```

## Common Error Messages and Solutions

| Error Message | Likely Cause | Solution |
|---------------|--------------|----------|
| `No active wallet mnemonic configured` | Missing ALGORAND_AGENT_WALLET | Inform user and try again |
| `Error fetching account info` | Network connection or invalid address | Check ALGORAND_ALGOD setting and address format |
| `Transaction would result in negative balance` | Insufficient funds | Ensure sender has enough ALGOs (remember min balance requirements) |
| `Asset hasn't been opted in` | Asset not in receiver's account | Receiver must opt in to asset first |
| `Cannot access knowledge resources` | R2 bucket misconfiguration | Verify R2 bucket setup and permissions |
| `Overspend` | Transaction fee + amount exceeds balance | Reduce amount or add funds to account |

## Best Practices for Algorand Operations

1. **Transaction Security**
   - Always verify transaction parameters
   - Use suggested parameters from the network
   - Include reasonable fees for timely processing
   - Keep mnemonics and secret keys secure
   - Use proper error handling for transactions

2. **Account Management**
   - Verify account exists before operations
   - Check sufficient balance for operations
   - Verify asset opt-in before transfers
   - Handle account rekey operations carefully
   - Protect sensitive account information

3. **Smart Contract Interactions**
   - Applications are deployed directly to mainnet (exercise caution)
   - Verify application state before operations
   - Use proper argument encoding
   - Handle application state carefully
   - Understand application approval logic

4. **Asset Handling**
   - Verify asset configuration before operations
   - Check decimals for proper amount calculations
   - Always opt-in before receiving assets
   - Verify asset balances before transfers
   - Handle clawback operations carefully

## Security Guidelines

⚠️ **MAINNET WARNING**: This system operates on Algorand Mainnet with real assets and real value. Exercise extreme caution with all operations.

1. **Sensitive Data Protection**
   - Never expose mnemonics
   - Never reveal private keys
   - Never display secret keys to users
   - Use securely stored wallet configuration
   - Use Wrangler secrets for sensitive values

2. **Transaction Best Practices**
   - Always verify transaction outputs before submission
   - Double-check recipient addresses (mainnet transactions are irreversible)
   - Check fee structures
   - Use proper atomic grouping for dependent operations
   - Implement proper error handling
   - Use simulation before submitting critical transactions
